"""
Django settings for infraon project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import mongoengine

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-fq)dn41x8w6(322li_9k9ma8qhffk-8o#o*0si5^+n@%!z%fa+')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
	# 'django.contrib.admin',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'django.contrib.sites',
	# restful app binding
	'corsheaders',
	'rest_framework',
	# 'rest_framework.authtoken',
	#
	# added new app here
	'app.user_keycloak',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	# 'django.contrib.auth.middleware.AuthenticationMiddleware',
	'app.user_keycloak.middleware.KeycloakAuthenticationMiddleware',
	'app.user_keycloak.middleware.SecurityHeadersMiddleware',
	#
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'infraon.urls'

# TEMPLATES = [
# 	{
# 		'BACKEND': 'django.template.backends.django.DjangoTemplates',
# 		'DIRS': [BASE_DIR / 'templates'],
# 		'APP_DIRS': True,
# 		'OPTIONS': {
# 			'context_processors': [
# 				'django.template.context_processors.request',
# 				# 'django.contrib.auth.context_processors.auth',
# 				'django.contrib.messages.context_processors.messages',
# 			],
# 		},
# 	},
# ]

WSGI_APPLICATION = 'infraon.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# MongoDB connection using MongoEngine
mongoengine.connect(
	db=config('MONGODB_NAME', default='django_keycloak'),
	host=config('MONGODB_HOST', default='localhost'),
	port=config('MONGODB_PORT', default=27017, cast=int),
)

DATABASES = {
	'default': {
		'ENGINE': config('DB_ENGINE', default='django.db.backends.postgresql'),
		'NAME': config('DB_NAME', default='django_no_auth_db'),
		'USER': config('DB_USER', default='postgres'),
		'PASSWORD': config('DB_PASSWORD', default=''),
		'HOST': config('DB_HOST', default='localhost'),
		'PORT': config('DB_PORT', default='5432'),
	}
}


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Static files
# STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#######
##

CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='', cast=lambda v: [s.strip() for s in v.split(',')])
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = [
	'X-Token-Expires-In',
	'X-Token-Refresh-Hint',
	'X-User-ID',
	'X-User-Roles',
]


TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [BASE_DIR / 'templates'],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.messages.context_processors.messages',
				# Add Keycloak context processor
				'app.user_keycloak.context_processors.keycloak_auth',
			],
		},
	},
]

REST_FRAMEWORK = {
	'DEFAULT_AUTHENTICATION_CLASSES': [
		'app.user_keycloak.authentication.KeycloakAuthentication',
	],
	'DEFAULT_PERMISSION_CLASSES': [
		'rest_framework.permissions.IsAuthenticated',
	],
	'DEFAULT_RENDERER_CLASSES': [
		'rest_framework.renderers.JSONRenderer',
	],
	'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
	'PAGE_SIZE': 20,
	'DEFAULT_THROTTLE_CLASSES': [
		'rest_framework.throttling.AnonRateThrottle',
		'rest_framework.throttling.UserRateThrottle',
	],
	'DEFAULT_THROTTLE_RATES': {'anon': '100/hour', 'user': '1000/hour'},
}


# # Logging Configuration
# LOGGING = {
# 	'version': 1,
# 	'disable_existing_loggers': False,
# 	'formatters': {
# 		'verbose': {
# 			'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
# 			'style': '{',
# 		},
# 		'json': {
# 			'()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
# 			'format': '%(asctime)s %(name)s %(levelname)s %(message)s',
# 		},
# 	},
# 	'handlers': {
# 		'console': {
# 			'class': 'logging.StreamHandler',
# 			'formatter': 'verbose',
# 		},
# 		'file': {
# 			'class': 'logging.handlers.RotatingFileHandler',
# 			'filename': 'logs/django.log',
# 			'maxBytes': 1024 * 1024 * 10,  # 10MB
# 			'backupCount': 5,
# 			'formatter': 'json',
# 		},
# 		'security': {
# 			'class': 'logging.handlers.RotatingFileHandler',
# 			'filename': 'logs/security.log',
# 			'maxBytes': 1024 * 1024 * 10,
# 			'backupCount': 10,
# 			'formatter': 'json',
# 		},
# 	},
# 	'loggers': {
# 		'keycloak_auth': {
# 			'handlers': ['console', 'file'],
# 			'level': 'INFO',
# 			'propagate': False,
# 		},
# 		'security': {
# 			'handlers': ['console', 'security'],
# 			'level': 'WARNING',
# 			'propagate': False,
# 		},
# 		'django.security': {
# 			'handlers': ['security'],
# 			'level': 'WARNING',
# 			'propagate': False,
# 		},
# 	},
# }


# AUTHENTICATION_BACKENDS = [
# 	'django.contrib.auth.backends.ModelBackend',
# ]

# Custom Authentication Backend
AUTHENTICATION_BACKENDS = [
	'app.user_keycloak.auth_backends.KeycloakAuthenticationBackend',
]


MIGRATION_MODULES = {
	'auth': None,
	# 'contenttypes': None,  # Optional: remove if you don't need content types
}

REST_FRAMEWORK = {
	'DEFAULT_AUTHENTICATION_CLASSES': [
		'app.user_keycloak.authentication.KeycloakAuthentication',
	],
	'DEFAULT_PERMISSION_CLASSES': [
		'rest_framework.permissions.IsAuthenticated',
	],
	'DEFAULT_RENDERER_CLASSES': [
		'rest_framework.renderers.JSONRenderer',
	],
	'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
	'PAGE_SIZE': 20,
	'DEFAULT_THROTTLE_CLASSES': [
		'rest_framework.throttling.AnonRateThrottle',
		'rest_framework.throttling.UserRateThrottle',
	],
	'DEFAULT_THROTTLE_RATES': {'anon': '100/hour', 'user': '1000/hour'},
}


REDIS_HOST = config('REDIS_HOST', default='127.0.0.1')
REDIS_PORT = config('REDIS_PORT', default=6379, cast=int)
REDIS_PASSWORD = config('REDIS_PASSWORD', default='Infra0n')
REDIS_SSL = config('REDIS_SSL', default=False, cast=bool)
REDIS_DB_DEFAULT = config('REDIS_DB_DEFAULT', default=0, cast=int)
REDIS_DB_SESSIONS = config('REDIS_DB_SESSIONS', default=0, cast=int)


def build_redis_url(db=1):
	protocol = 'rediss' if REDIS_SSL else 'redis'
	if REDIS_PASSWORD:
		return f'{protocol}://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{db}'
	return f'{protocol}://{REDIS_HOST}:{REDIS_PORT}/{db}'


# Production Redis with Clustering Support
CACHES = {
	'default': {
		'BACKEND': 'django_redis.cache.RedisCache',
		'LOCATION': [
			build_redis_url(REDIS_DB_DEFAULT),
			# Add more Redis nodes for clustering
			# f"{protocol}://:{REDIS_PASSWORD}@redis-node-2:6379/{REDIS_DB_DEFAULT}",
			# f"{protocol}://:{REDIS_PASSWORD}@redis-node-3:6379/{REDIS_DB_DEFAULT}",
		],
		'OPTIONS': {
			'CLIENT_CLASS': 'django_redis.client.ShardClient',
			'CONNECTION_POOL_KWARGS': {
				'max_connections': 100,
				'retry_on_timeout': True,
				'socket_keepalive': True,
				'socket_keepalive_options': {},
				'health_check_interval': 30,
				'socket_connect_timeout': 5,
				'socket_timeout': 5,
			},
			'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
			'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
			'IGNORE_EXCEPTIONS': False,
		},
		'KEY_PREFIX': 'keycloak_prod',
		'TIMEOUT': 1800,  # 30 minutes
		'VERSION': 1,
	},
	'sessions': {
		'BACKEND': 'django_redis.cache.RedisCache',
		'LOCATION': build_redis_url(REDIS_DB_SESSIONS),
		'OPTIONS': {
			'CLIENT_CLASS': 'django_redis.client.DefaultClient',
			'CONNECTION_POOL_KWARGS': {
				'max_connections': 50,
				'retry_on_timeout': True,
			},
		},
		'KEY_PREFIX': 'keycloak_sessions_prod',
		'TIMEOUT': 1800,
	},
}

# Redis Session Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'  # Use dedicated sessions cache
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_NAME = 'keycloak_sessionid'  # Custom session cookie name


# Keycloak Configuration
KEYCLOAK_SERVER_URL = config('KEYCLOAK_SERVER_URL', default='http://localhost:8080')
KEYCLOAK_REALM = config('KEYCLOAK_REALM', default='django-app')
KEYCLOAK_CLIENT_ID = config('KEYCLOAK_CLIENT_ID', default='django-client')
KEYCLOAK_CLIENT_SECRET = config('KEYCLOAK_CLIENT_SECRET', default='90h0rc6VZhHE7VfPAvJjq61A96UvOM9rjsndkjsd')

KEYCLOAK_CONFIG = {
	'SERVER_URL': KEYCLOAK_SERVER_URL,
	'REALM': KEYCLOAK_REALM,
	'CLIENT_ID': KEYCLOAK_CLIENT_ID,
	'CLIENT_SECRET': KEYCLOAK_CLIENT_SECRET,
	'AUTHORIZATION_URL': f'{KEYCLOAK_SERVER_URL}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/auth',
	'TOKEN_URL': f'{KEYCLOAK_SERVER_URL}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/token',
	'USERINFO_URL': f'{KEYCLOAK_SERVER_URL}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/userinfo',
	'JWKS_URL': f'{KEYCLOAK_SERVER_URL}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/certs',
	'LOGOUT_URL': f'{KEYCLOAK_SERVER_URL}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/logout',
	'INTROSPECT_URL': f'{KEYCLOAK_SERVER_URL}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/token/introspect',
	# JWT Token Settings
	'ALGORITHMS': ['RS256'],
	'AUDIENCE': None,
	#  'AUDIENCE': 'django-client',
	'ISSUER': f'{KEYCLOAK_SERVER_URL}/realms/{KEYCLOAK_REALM}',
	# Token Lifetime Settings
	'ACCESS_TOKEN_LIFETIME': 15 * 60,  # 15 minutes
	'REFRESH_TOKEN_LIFETIME': 24 * 60 * 60,  # 24 hours
	# JWT Validation Settings
	'VERIFY_SIGNATURE': True,
	'VERIFY_EXP': True,
	'VERIFY_AUD': True,
	'VERIFY_ISS': True,
	'LEEWAY': 10,  # 10 seconds leeway for clock skew
	# OAuth2 Settings
	'SCOPE': 'openid profile email',
	'RESPONSE_TYPE': 'code',
	'GRANT_TYPE': 'authorization_code',
	# Redis-specific caching settings
	'CACHE_JWKS': True,  # Cache Keycloak public keys
	'JWKS_CACHE_TIMEOUT': 3600,  # Cache JWKS for 1 hour
	'USER_INFO_CACHE_TIMEOUT': 300,  # Cache user info for 5 minutes
}
